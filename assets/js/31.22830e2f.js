(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{392:function(_,v,t){"use strict";t.r(v);var a=t(25),s=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"网络篇"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络篇"}},[_._v("#")]),_._v(" 网络篇")]),_._v(" "),t("h3",{attrs:{id:"网络请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络请求"}},[_._v("#")]),_._v(" 网络请求")]),_._v(" "),t("h4",{attrs:{id:"_1-构建请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-构建请求"}},[_._v("#")]),_._v(" 1.构建请求")]),_._v(" "),t("p",[_._v("浏览器会构建请求行：")]),_._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("//请求方法是GET，路径是/，HTTP协议版本是1.1\nGET / HTTP/1.1\n")])])]),t("h4",{attrs:{id:"_2-查找强缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-查找强缓存"}},[_._v("#")]),_._v(" 2.查找强缓存")]),_._v(" "),t("p",[_._v("先检查强缓存，如果命中直接使用，否则进入下一步。")]),_._v(" "),t("h4",{attrs:{id:"_3-dns解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-dns解析"}},[_._v("#")]),_._v(" 3.DNS解析")]),_._v(" "),t("p",[_._v("由于我们输入的是域名，而数据包是通过"),t("strong",[_._v("IP地址")]),_._v("传给对方的。因此我们需要得到域名对应的"),t("strong",[_._v("IP地址")]),_._v("。这个过程需要以来一个服务系统，这个系统将域名和IP一一映射，我们将这个系统叫做"),t("strong",[_._v("DNS")]),_._v("。得到具体IP地址的过场就是"),t("strong",[_._v("DNS解析")]),_._v("。")]),_._v(" "),t("p",[_._v("当然，浏览器提供了"),t("strong",[_._v("DNS数据缓存功能")]),_._v("。即如果一个域名已经解析过，那会把解析的结果缓存下来，下次直接用缓存，不需要再经过DNS解析。")]),_._v(" "),t("p",[_._v("另外，如果不指定端口的话，默认采用对应IP的80端口。")]),_._v(" "),t("h4",{attrs:{id:"_4-建立tcp连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-建立tcp连接"}},[_._v("#")]),_._v(" 4.建立TCP连接")]),_._v(" "),t("blockquote",[t("p",[_._v("TCP (Transmission Control Protocol, 传输控制协议)是一种面向连接、可靠的、基于字节流的传输层通信协议。")])]),_._v(" "),t("p",[_._v("建立"),t("strong",[_._v("TCP连接")]),_._v("经历了下面三个阶段：")]),_._v(" "),t("ol",[t("li",[_._v("通过"),t("strong",[_._v("三次握手")]),_._v("建立客户端与服务端之间的连接。")]),_._v(" "),t("li",[_._v("进行数据传输阶段。这里有一个重要机制，就是接收方收到数据包后必须要向发送方"),t("strong",[_._v("确认")]),_._v("，如果发送方没有收到这个"),t("strong",[_._v("确认")]),_._v("，就判定这个数据包丢失，并重新发送该数据包。在发送的过程中还有一个"),t("strong",[_._v("优化策略")]),_._v("，就是"),t("strong",[_._v("把大的数据包拆成一个个小包")]),_._v("，一次传输到接收方，接收方按照小包的顺序把他们组装成一个完成的数据包。")]),_._v(" "),t("li",[_._v("断开连接的阶段。传输数据完成，就要断开连接了，通过"),t("strong",[_._v("四次挥手")]),_._v("来断开连接。")])]),_._v(" "),t("p",[_._v("到这里TCP连接的可靠性就通过：1."),t("strong",[_._v("三次握手")]),_._v("确认连接，2."),t("strong",[_._v("数据包校验")]),_._v("保证数据到达接收方，3."),t("strong",[_._v("四次挥手")]),_._v("断开连接 保证了。")]),_._v(" "),t("h4",{attrs:{id:"_5-发送http请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-发送http请求"}},[_._v("#")]),_._v(" 5.发送HTTP请求")]),_._v(" "),t("p",[t("strong",[_._v("TCP")]),_._v("连接建立后，浏览器和服务端可以开始通信，即开始发送HTTP请求。浏览器发送HTTP请求要携带三样东西："),t("strong",[_._v("请求行")]),_._v("、"),t("strong",[_._v("请求头")]),_._v("、"),t("strong",[_._v("请求体")]),_._v("。")]),_._v(" "),t("p",[_._v("首先，浏览器茴香服务器发送"),t("strong",[_._v("请求行")])]),_._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("//请求方法GET 路径 / HTTP协议版本1.1\nGET / HTTP/1.1\n")])])]),t("p",[_._v("结构很简单，由请求方法、请求路径URI和HTTP版本协议组成。")]),_._v(" "),t("p",[_._v("同时也要带上"),t("strong",[_._v("请求头")])]),_._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9\nCache-Control: no-cache\nConnection: keep-alive\nCookie: /* 省略cookie信息 */\nHost: www.baidu.com\nPragma: no-cache\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\n")])])]),t("p",[_._v("最后是请求体，只在"),t("strong",[_._v("POST")]),_._v("方法下存在，常见场景是"),t("strong",[_._v("表单提交")])]),_._v(" "),t("h3",{attrs:{id:"网络响应"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络响应"}},[_._v("#")]),_._v(" 网络响应")]),_._v(" "),t("p",[_._v("HTTP请求到达服务器，服务器进行相应的处理。最后要把数据传给浏览器，也就是返回网络响应。")]),_._v(" "),t("p",[_._v("跟请求部分类似，网络响应也分三个部分："),t("strong",[_._v("响应行")]),_._v("、"),t("strong",[_._v("响应头")]),_._v("、"),t("strong",[_._v("响应体")]),_._v("。")]),_._v(" "),t("p",[_._v("响应行类似下面这样：")]),_._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("HTTP/1.1 200 OK\n")])])]),t("p",[_._v("由HTTP协议版本、状态码、状态描述组成。")]),_._v(" "),t("p",[_._v("响应头包含了服务器及返回数据的一些信息，服务器生成数据的事件、返回的数据类型以及对即将写入的Cookie信息。\nExample:")]),_._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("Cache-Control: no-cache\nConnection: keep-alive\nContent-Encoding: gzip\nContent-Type: text/html;charset=utf-8\nDate: Wed, 04 Dec 2019 12:29:13 GMT\nServer: apache\nSet-Cookie: rsv_i=f9a0SIItKqzv7kqgAAgphbGyRts3RwTg%2FLyU3Y5Eh5LwyfOOrAsvdezbay0QqkDqFZ0DfQXby4wXKT8Au8O7ZT9UuMsBq2k; path=/; domain=.baidu.com\n")])])]),t("p",[_._v("响应完后TCP一定就断开连接了吗？")]),_._v(" "),t("p",[_._v("不一定。这时要判断"),t("code",[_._v("Connection")]),_._v("字段，如果请求头或响应头中包含"),t("strong",[_._v("Connection:Keep-Alive")]),_._v(",表示建立了持久连接，这样TCP连接会一直保持，之后请求同一站点的资源会复用这个连接。")]),_._v(" "),t("p",[_._v("否则断开TCP连接，请求-响应流程结束。")]),_._v(" "),t("h3",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[_._v("#")]),_._v(" 总结")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/15/16f080b095268038?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})]),_._v(" "),t("h2",{attrs:{id:"解析算法篇"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解析算法篇"}},[_._v("#")]),_._v(" 解析算法篇")]),_._v(" "),t("p",[_._v("完成了网络请求和响应后，如果响应头中"),t("code",[_._v("Content-Type")]),_._v("的值为"),t("code",[_._v("text/html")]),_._v("，那个接下来就是浏览器的"),t("strong",[_._v("解析")]),_._v("和"),t("strong",[_._v("渲染")]),_._v("工作了。")]),_._v(" "),t("p",[_._v("首先来介绍解析部分，主要分为以下几个步骤：")]),_._v(" "),t("ul",[t("li",[_._v("构建"),t("code",[_._v("DOM")]),_._v("树")]),_._v(" "),t("li",[t("code",[_._v("css")]),_._v("计算")]),_._v(" "),t("li",[_._v("生成"),t("code",[_._v("布局树（Layout tree）")])])]),_._v(" "),t("h3",{attrs:{id:"构建dom树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建dom树"}},[_._v("#")]),_._v(" 构建DOM树")]),_._v(" "),t("p",[_._v("由于浏览器无法直接理解"),t("code",[_._v("HTML字符串")]),_._v("，因此将这一系列的字节流转换为一种有意义并且方便操作的数据结构，这种数据结构就是"),t("strong",[_._v("DOM树")]),_._v("。DOM树本质上是一个以"),t("code",[_._v("document")]),_._v("为根节点的多叉树。")]),_._v(" "),t("p",[_._v("那到底是通过什么样的方式来进行解析的呢？")]),_._v(" "),t("h4",{attrs:{id:"html文法的本质"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#html文法的本质"}},[_._v("#")]),_._v(" HTML文法的本质")]),_._v(" "),t("p",[t("code",[_._v("非上下文无关")])]),_._v(" "),t("h4",{attrs:{id:"解析算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解析算法"}},[_._v("#")]),_._v(" 解析算法")]),_._v(" "),t("p",[_._v("HTML5"),t("a",{attrs:{href:"https://html.spec.whatwg.org/multipage/parsing.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("规范"),t("OutboundLink")],1),_._v("详细地介绍了解析算法。这个算法分为两个阶段：")]),_._v(" "),t("ol",[t("li",[_._v("标记化")]),_._v(" "),t("li",[_._v("建树")])]),_._v(" "),t("p",[_._v("对应的两个过程就是"),t("strong",[_._v("词法分析")]),_._v("和"),t("strong",[_._v("语法分析")]),_._v("。")]),_._v(" "),t("h4",{attrs:{id:"标记化算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标记化算法"}},[_._v("#")]),_._v(" 标记化算法")]),_._v(" "),t("p",[_._v("这个算法输入为"),t("code",[_._v("HTML文本")]),_._v("，输出为"),t("code",[_._v("HTML标记")]),_._v("，也称为"),t("strong",[_._v("标记生成器")]),_._v("。其中运用"),t("strong",[_._v("有限自动状态机")]),_._v("来完成。即在当前状态下，接受一个或多个字符，就会更新到下一个状态。")]),_._v(" "),t("div",{staticClass:"language-html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("<")]),_._v("html")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(">")])]),_._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("<")]),_._v("body")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(">")])]),_._v("\n     Hello\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("</")]),_._v("body")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(">")])]),_._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("</")]),_._v("html")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(">")])]),_._v("\n")])])]),t("p",[_._v("通过这个例子来演示一下"),t("strong",[_._v("标记化")]),_._v("过程。")]),_._v(" "),t("p",[_._v("遇到"),t("code",[_._v("<")]),_._v("，状态为"),t("strong",[_._v("标记打开")])]),_._v(" "),t("p",[_._v("接受"),t("code",[_._v("[a-z]")]),_._v("的字符，会进入"),t("strong",[_._v("标记名称状态")])]),_._v(" "),t("p",[_._v("这个状态一直保持，直到遇到"),t("code",[_._v(">")]),_._v("，表示名称记录完成，这时候变为"),t("strong",[_._v("数据状态")])]),_._v(" "),t("p",[_._v("接下来遇到"),t("code",[_._v("body")]),_._v("标签做同样的处理")]),_._v(" "),t("p",[_._v("这时候"),t("code",[_._v("html")]),_._v("和"),t("code",[_._v("body")]),_._v("的标记都做好了")]),_._v(" "),t("p",[_._v("现在来到"),t("code",[_._v("<body>")]),_._v("中的"),t("code",[_._v(">")]),_._v("，进"),t("strong",[_._v("入数据状态")]),_._v("，之后保持这样的状态接收后面的字符"),t("code",[_._v("Hello")])]),_._v(" "),t("p",[_._v("接着接收"),t("code",[_._v("</body>")]),_._v("中"),t("code",[_._v("<")]),_._v("，回到"),t("strong",[_._v("标记打开")]),_._v("，接收下一个"),t("code",[_._v("/")]),_._v("后，这时候会创建一个"),t("code",[_._v("end tag")]),_._v("的token")]),_._v(" "),t("p",[_._v("随后进入"),t("strong",[_._v("标记名称状态")]),_._v("，遇到"),t("code",[_._v(">")]),_._v("回到"),t("strong",[_._v("数据状态")]),_._v("。")]),_._v(" "),t("p",[_._v("接着以同样的方式处理"),t("code",[_._v("</html>")])]),_._v(" "),t("h4",{attrs:{id:"建树算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#建树算法"}},[_._v("#")]),_._v(" 建树算法")]),_._v(" "),t("p",[_._v("之前提到过，DOM树是一个以"),t("code",[_._v("document")]),_._v("为根节点的多叉树。因此解析器首先会创建一个"),t("code",[_._v("document")]),_._v("对象。标记生成器会把每个标记的信息发送给"),t("strong",[_._v("建树器")]),_._v("。"),t("strong",[_._v("建树器")]),_._v("接收到相应的标记时，会创建"),t("strong",[_._v("对应的DOM对象")]),_._v("。创建这个"),t("code",[_._v("DOM对象")]),_._v("后会做两件事情：")]),_._v(" "),t("ol",[t("li",[_._v("将"),t("code",[_._v("DOM对象")]),_._v("加入DOM树中")]),_._v(" "),t("li",[_._v("将对应标记压入存放开放（与"),t("code",[_._v("闭合标签")]),_._v("意思对应）元素的栈中。")])]),_._v(" "),t("p",[_._v("仍用这个例子说明：")]),_._v(" "),t("div",{staticClass:"language-html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("<")]),_._v("html")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(">")])]),_._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("<")]),_._v("body")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(">")])]),_._v("\n     Hello\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("</")]),_._v("body")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(">")])]),_._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("</")]),_._v("html")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(">")])]),_._v("\n")])])]),t("p",[_._v("首先，状态为"),t("strong",[_._v("初始化状态")])]),_._v(" "),t("p",[_._v("接收到标记生成器传来的"),t("code",[_._v("html")]),_._v("标签，这时候状态变为"),t("strong",[_._v("before html状态")]),_._v("。同时创建一个"),t("code",[_._v("HTMLHtmlElement")]),_._v("的DOM元素，将其加到"),t("code",[_._v("document")]),_._v("根对象上，并且进行压栈操作。")]),_._v(" "),t("p",[_._v("接着状态自动变为"),t("strong",[_._v("before head")]),_._v("，此时从标记生成器传来"),t("code",[_._v("body")]),_._v("，表示并没有"),t("code",[_._v("head")]),_._v("，这时候"),t("strong",[_._v("建树器")]),_._v("会自动创建一个"),t("code",[_._v("HTMLHeadElement")]),_._v("并将其加入到DOM树。")]),_._v(" "),t("p",[_._v("现在进入到"),t("strong",[_._v("in head")]),_._v("状态，然后直接跳到"),t("strong",[_._v("after head")])]),_._v(" "),t("p",[_._v("现在"),t("strong",[_._v("标记生成器")]),_._v("传来了"),t("code",[_._v("body")]),_._v("标记，创建"),t("code",[_._v("HTMLBodyElement")]),_._v("，插入DOM树中，同时压入开放标记栈。")]),_._v(" "),t("p",[_._v("接着状态变为"),t("strong",[_._v("in body")]),_._v(",然后接收到后面的字符Hello，接收到第一个字符的时候，会创建一个"),t("strong",[_._v("Text")]),_._v("节点并把字符插入其中，然后把"),t("strong",[_._v("Text")]),_._v("节点插入DOM树中的"),t("code",[_._v("body元素")]),_._v("下面。随着不断的接收后面的字符，这些字符会附在"),t("strong",[_._v("Text")]),_._v("节点上。")]),_._v(" "),t("p",[_._v("现在，"),t("strong",[_._v("标记生成器")]),_._v("传来一个"),t("code",[_._v("body")]),_._v("的结束标记，进入到"),t("strong",[_._v("after body")]),_._v("状态")]),_._v(" "),t("p",[t("strong",[_._v("标记生成器")]),_._v("最后传来一个"),t("code",[_._v("html")]),_._v("的结束标记，进入到"),t("strong",[_._v("after html")]),_._v("状态，表示解析过程结束。")]),_._v(" "),t("h4",{attrs:{id:"容错机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容错机制"}},[_._v("#")]),_._v(" 容错机制")]),_._v(" "),t("p",[_._v("参考神三元的"),t("a",{attrs:{href:"https://juejin.im/post/5df5bcea6fb9a016091def69#heading-24",target:"_blank",rel:"noopener noreferrer"}},[_._v("容错机制"),t("OutboundLink")],1)]),_._v(" "),t("h3",{attrs:{id:"样式计算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#样式计算"}},[_._v("#")]),_._v(" 样式计算")]),_._v(" "),t("p",[_._v("关于CSS样式，一般来源有三种：")]),_._v(" "),t("ol",[t("li",[_._v("link标签引用")]),_._v(" "),t("li",[_._v("style标签中的样式")]),_._v(" "),t("li",[_._v("元素的内嵌style")])]),_._v(" "),t("h4",{attrs:{id:"格式化样式表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#格式化样式表"}},[_._v("#")]),_._v(" 格式化样式表")]),_._v(" "),t("p",[_._v("首先，浏览器是无法识别CSS样式文本的，因此渲染引擎接收到CSS文本之后第一件事情就是将其转化为一个结构化的对象，即"),t("strong",[_._v("styleSheets")]),_._v("。")]),_._v(" "),t("p",[_._v("这个格式化的过程过于复杂，而且对于不同浏览器会有不同的优化策略，这里就不展开了。")]),_._v(" "),t("p",[_._v("在浏览器控制台中能够通过"),t("code",[_._v("document.styleSheets")]),_._v("来查看这个最终的结构。")]),_._v(" "),t("h4",{attrs:{id:"标准化样式属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标准化样式属性"}},[_._v("#")]),_._v(" 标准化样式属性")]),_._v(" "),t("p",[_._v("有一些CSS样式的数值并不容易被渲染引擎理解，因此需要在计算样式之前将他们标准化，如 "),t("code",[_._v("em")]),_._v("->"),t("code",[_._v("px")]),_._v(","),t("code",[_._v("red")]),_._v("->"),t("code",[_._v("#ff00000")]),_._v(","),t("code",[_._v("bold")]),_._v("->"),t("code",[_._v("700")]),_._v("等等。")]),_._v(" "),t("h4",{attrs:{id:"计算每个节点的具体样式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算每个节点的具体样式"}},[_._v("#")]),_._v(" 计算每个节点的具体样式")]),_._v(" "),t("p",[_._v("样式已经被"),t("code",[_._v("格式化")]),_._v("和"),t("code",[_._v("标准化")]),_._v("，接下来就可以计算每个节点的具体样式信息了。")]),_._v(" "),t("p",[_._v("计算的方式主要有两个规则："),t("strong",[_._v("继承")]),_._v("和"),t("strong",[_._v("层叠")]),_._v("。")]),_._v(" "),t("p",[_._v("每个子节点都会默认继承父节点的样式属性，如果父节点中没有找到，就会采用浏览器默认样式，也叫"),t("code",[_._v("UserAgent样式")]),_._v("。这就是继承规则。")]),_._v(" "),t("p",[_._v("然后是层叠规则，CSS最大的特点在于它的层叠性，也就是最终的样式取决于各个属性共同作用的效果，甚至有很多诡异的层叠现象。")]),_._v(" "),t("p",[_._v("计算完样式后，所有的样式值都会被挂载到"),t("code",[_._v("window.getComputedStyle")]),_._v("当中，可以通过JS来获取到计算后的样式。")]),_._v(" "),t("h3",{attrs:{id:"生成布局树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生成布局树"}},[_._v("#")]),_._v(" 生成布局树")]),_._v(" "),t("p",[_._v("现在已经生成了"),t("code",[_._v("DOM树")]),_._v("和"),t("code",[_._v("DOM样式")]),_._v("，加下来要做的就是通过浏览器的布局系统"),t("strong",[_._v("确定元素的位置")]),_._v("，也就是要生成一颗"),t("strong",[_._v("布局树")])]),_._v(" "),t("p",[_._v("布局树生成大致工作如下：")]),_._v(" "),t("ol",[t("li",[_._v("遍历生成的DOM树节点，并把他们添加到"),t("strong",[_._v("布局树中")])]),_._v(" "),t("li",[_._v("计算布局树节点的坐标位置")])]),_._v(" "),t("p",[_._v("值得注意的是，这棵布局树只包含课件元素，对于"),t("code",[_._v("head")]),_._v("标签和设置了"),t("code",[_._v("display:none")]),_._v("的元素将不会被放入其中。")]),_._v(" "),t("h3",{attrs:{id:"总结-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[_._v("#")]),_._v(" 总结")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/15/16f080b2f718e4ad?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"页面解析计算过程"}})]),_._v(" "),t("h2",{attrs:{id:"渲染过程篇"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染过程篇"}},[_._v("#")]),_._v(" 渲染过程篇")]),_._v(" "),t("p",[t("strong",[_._v("渲染")]),_._v("主要分为以下几个步骤：")]),_._v(" "),t("ol",[t("li",[_._v("建立"),t("code",[_._v("图层树（layer tree）")])]),_._v(" "),t("li",[_._v("生成"),t("code",[_._v("绘制列表")])]),_._v(" "),t("li",[_._v("生成"),t("code",[_._v("图块")]),_._v("并"),t("code",[_._v("栅格化")])]),_._v(" "),t("li",[_._v("显示器显示内容")])]),_._v(" "),t("h3",{attrs:{id:"_1-建图层树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-建图层树"}},[_._v("#")]),_._v(" 1. 建图层树")]),_._v(" "),t("p",[_._v("如果你觉得现在"),t("strong",[_._v("DOM节点")]),_._v("有了，样式，位置也有了就可以开始绘制页面了，那你就错了。")]),_._v(" "),t("p",[_._v("因为你考虑掉了另外一些复杂的场景，比如3D动画如何呈现出变换效果，当元素含有层叠上下文时如何控制显示和隐藏等等。")]),_._v(" "),t("p",[_._v("为了解决如上所述的问题，浏览器在构建完"),t("strong",[_._v("布局树")]),_._v("之后，还会对特定的节点进行分层，构建一棵"),t("strong",[_._v("图层树(layer tree)")]),_._v("。")]),_._v(" "),t("p",[_._v("图层树是根据什么来构建的呢？")]),_._v(" "),t("p",[_._v("一般情况下，节点的图层会默认属于父节点的图层。那什么时候会提升为一个单独的图层（也称为"),t("strong",[_._v("合成层")]),_._v("）呢")]),_._v(" "),t("p",[_._v("有两种情况需要分别讨论：一是"),t("strong",[_._v("显式合成")]),_._v("，而是"),t("strong",[_._v("隐式合成")]),_._v("。")]),_._v(" "),t("h4",{attrs:{id:"显式合成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#显式合成"}},[_._v("#")]),_._v(" 显式合成")]),_._v(" "),t("p",[_._v("显式合成情况：")]),_._v(" "),t("p",[_._v("一、拥有"),t("strong",[_._v("层叠上下文")]),_._v("的节点")]),_._v(" "),t("p",[_._v("层叠上下文也基本上是有一些特定的CSS属性创建的，一般有以下情况：")]),_._v(" "),t("ol",[t("li",[_._v("HTML根元素本身就有层叠上下文")]),_._v(" "),t("li",[_._v("普通元素设置"),t("code",[_._v("position")]),_._v("不为"),t("code",[_._v("static")]),_._v("并且设置了"),t("code",[_._v("z-index")]),_._v("，会产生层叠上下文。")]),_._v(" "),t("li",[_._v("元素"),t("code",[_._v("opacity")]),_._v("不会1")]),_._v(" "),t("li",[_._v("元素"),t("code",[_._v("transform")]),_._v("不为none")]),_._v(" "),t("li",[_._v("元素"),t("code",[_._v("filter")]),_._v("不会none")]),_._v(" "),t("li",[_._v("元素"),t("code",[_._v("isolate")]),_._v("的值为isolate")]),_._v(" "),t("li",[t("code",[_._v("will-change")]),_._v("指定的属性值为上面任意一个。")])]),_._v(" "),t("p",[_._v("二、需要"),t("strong",[_._v("裁减")]),_._v("的地方")]),_._v(" "),t("p",[_._v("比如一个div，只给了100*100的长宽大小，而里面的文字放了很多，那么超出的部分就要被裁减掉。当然如果出现了滚动条，那么滚动条会被单独提升为一个图层。")]),_._v(" "),t("h4",{attrs:{id:"隐式合成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#隐式合成"}},[_._v("#")]),_._v(" 隐式合成")]),_._v(" "),t("p",[_._v("接下来是"),t("code",[_._v("隐式合成")]),_._v("，简单来说就是"),t("code",[_._v("层叠等级低")]),_._v("的节点被提升为单独的图层之后，那么"),t("strong",[_._v("所有层级等级比它高")]),_._v("的节点都会成为一个单独的图层。")]),_._v(" "),t("h3",{attrs:{id:"_2-生成绘制列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-生成绘制列表"}},[_._v("#")]),_._v(" 2.生成绘制列表")]),_._v(" "),t("p",[_._v("接下来渲染引擎会把图层的绘制拆分成一个个绘制指令，比如先画背景、再描绘边框。。。然后将这些指令按顺序组合成一个待绘制列表，相当于给后面的绘制操作做了一波计划。")]),_._v(" "),t("h3",{attrs:{id:"_3-生成图块和生成位图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-生成图块和生成位图"}},[_._v("#")]),_._v(" 3.生成图块和生成位图")]),_._v(" "),t("p",[_._v("现在开始绘制操作，实际上在渲染进程中绘制操作是由专门的线程来完成的，这个线程叫"),t("strong",[_._v("合成线程")]),_._v("。")]),_._v(" "),t("p",[_._v("因为视口就那么大，当页面很大时，要很久才滑到底，如果一口气绘制完很消耗性能。因此合成线程会把图层"),t("strong",[_._v("分块")])]),_._v(" "),t("h3",{attrs:{id:"_4-显示器显示内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-显示器显示内容"}},[_._v("#")]),_._v(" 4. 显示器显示内容")]),_._v(" "),t("h3",{attrs:{id:"总结-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-3"}},[_._v("#")]),_._v(" 总结")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/15/16f080b7b8926b7f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})])])}),[],!1,null,null,null);v.default=s.exports}}]);