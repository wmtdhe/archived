(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{384:function(v,_,e){"use strict";e.r(_);var a=e(25),t=Object(a.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h2",{attrs:{id:"强缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[v._v("#")]),v._v(" 强缓存")]),v._v(" "),e("p",[v._v("浏览器中的缓存作用分为两种情况，一种是需要发送"),e("strong",[v._v("HTTP")]),v._v("请求，一种是不需要发送的。")]),v._v(" "),e("p",[v._v("首先是检查强缓存，这个阶段是"),e("strong",[v._v("不需要")]),v._v("发送HTTP请求的。")]),v._v(" "),e("p",[v._v("如何检查缓存呢？\n在"),e("strong",[v._v("HTTP/1.0")]),v._v("和"),e("strong",[v._v("HTTP/1.1")]),v._v("中，字段是不一样的，在"),e("strong",[v._v("HTTP/1.0")]),v._v("中，使用的是"),e("strong",[v._v("Expires")]),v._v("，而"),e("strong",[v._v("HTTP/1.1")]),v._v("使用的是"),e("strong",[v._v("Cache-Control")]),v._v("。")]),v._v(" "),e("h3",{attrs:{id:"expires"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[v._v("#")]),v._v(" Expires")]),v._v(" "),e("p",[e("code",[v._v("Expires")]),v._v("即过期时间，存在于服务端返回的响应头中，告诉浏览器在这个过期时间之内可以直接从缓存中获取数据，无需再次请求。比如：")]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v("Expires: Wed, 22 Nov 2019 08:41:00 GMT\n")])])]),e("p",[v._v("表示资源在19年11月22号8点41分过期。\n这个方法隐藏了一个问题——"),e("strong",[v._v("服务器时间和浏览器时间并不一致")]),v._v("，那服务器返回的过期时间就不准确。因此这个方式很快被HTTP/1.1版本抛弃。")]),v._v(" "),e("h3",{attrs:{id:"cache-control"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[v._v("#")]),v._v(" Cache-Control")]),v._v(" "),e("p",[v._v("HTTP/1.1版本")]),v._v(" "),e("p",[v._v("它与"),e("strong",[v._v("Expires")]),v._v("本质的不同在于它没有才去"),e("strong",[v._v("具体过期时间")]),v._v("这种方式，而是采用"),e("strong",[v._v("过期时长")]),v._v("来控制缓存。")]),v._v(" "),e("p",[v._v("Cache-Control可取的字段有：")]),v._v(" "),e("p",[e("strong",[v._v("max-age")]),v._v("：max-age=3600，表示在响应后3600秒内，使用强缓存。")]),v._v(" "),e("p",[e("strong",[v._v("public")]),v._v("：客户端和代理服务器都可以缓存。一个请求可能经过不同"),e("strong",[v._v("代理服务器")]),v._v("，最后才到目标服务器，那么结果不仅仅是浏览器可以缓存数据，中间任何节点都可以缓存。")]),v._v(" "),e("p",[e("strong",[v._v("private")]),v._v("：只有浏览器可以缓存，中间的代理服务器不能缓存。")]),v._v(" "),e("p",[e("strong",[v._v("no-cache")]),v._v("：跳过强缓存，发送HTTP请求，进入"),e("strong",[v._v("协商缓存阶段")]),v._v("。")]),v._v(" "),e("p",[e("strong",[v._v("no-store")]),v._v("：不进行任何缓存。")]),v._v(" "),e("p",[e("strong",[v._v("s-maxage")]),v._v("：针对代理服务器的缓存时间。")]),v._v(" "),e("blockquote",[e("p",[v._v("当"),e("code",[v._v("Expires")]),v._v("和"),e("code",[v._v("Cache-Control")]),v._v("同时存在时，"),e("code",[v._v("Cache-Control")]),v._v("的优先级会高于"),e("code",[v._v("Expires")]),v._v("。")])]),v._v(" "),e("p",[v._v("当强缓存过期后，会进入协商缓存阶段。")]),v._v(" "),e("h2",{attrs:{id:"协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[v._v("#")]),v._v(" 协商缓存")]),v._v(" "),e("p",[v._v("当强缓存失效后，浏览器会携带相应的"),e("strong",[v._v("缓存tag")]),v._v("向服务器发请求，由服务器根据这个tag来决定是否使用缓存。")]),v._v(" "),e("p",[v._v("缓存tag有两种"),e("strong",[v._v("ETag")]),v._v("和"),e("strong",[v._v("Last-Modified")]),v._v("。")]),v._v(" "),e("h3",{attrs:{id:"last-modified"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#last-modified"}},[v._v("#")]),v._v(" Last-Modified")]),v._v(" "),e("p",[v._v("即最后修改时间。在浏览器第一次给服务器发送请求后，服务器会在响应头中加上这个字段。")]),v._v(" "),e("p",[v._v("浏览器接收到后，如果再次请求，会在请求头中携带"),e("code",[v._v("If-Modified-Since")]),v._v("字段，这个字段的值也就是之前服务器传来的Last-Modified的值。")]),v._v(" "),e("p",[v._v("服务器拿到"),e("code",[v._v("If-Modified-Since")]),v._v("后会与服务器中的"),e("strong",[v._v("该资源的最后修改时间")]),v._v("对比：")]),v._v(" "),e("ul",[e("li",[v._v("如果请求头中的"),e("code",[v._v("If-Modified-Since")]),v._v("字段的值小于该资源的最后修改时间，则表示资源已经更新，返回新的资源。")]),v._v(" "),e("li",[v._v("否则返回304，告诉浏览器直接使用缓存")])]),v._v(" "),e("h3",{attrs:{id:"etag"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#etag"}},[v._v("#")]),v._v(" ETag")]),v._v(" "),e("p",[e("code",[v._v("ETag")]),v._v("是服务器根据当前文件内容，给文件生产的唯一标识，只要内容有改动，这个值就会变。服务器通过响应头把这个值给浏览器。")]),v._v(" "),e("p",[v._v("浏览器接收到"),e("code",[v._v("ETag")]),v._v("的值，会在下次请求时，将这个值作为"),e("code",[v._v("If-None-Match")]),v._v("这个字段的值放到请求头，发送给服务器。")]),v._v(" "),e("p",[v._v("服务器拿到"),e("code",[v._v("If-None-Match")]),v._v("后，会与服务器的"),e("code",[v._v("ETag")]),v._v("对比：")]),v._v(" "),e("ul",[e("li",[v._v("如果两者不一样，则资源已更新。")]),v._v(" "),e("li",[v._v("否者返回304，告诉浏览器使用缓存。")])]),v._v(" "),e("h3",{attrs:{id:"两者对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#两者对比"}},[v._v("#")]),v._v(" 两者对比")]),v._v(" "),e("ol",[e("li",[v._v("在"),e("strong",[v._v("精度上")]),v._v("，"),e("code",[v._v("ETag")]),v._v("高于"),e("code",[v._v("Last-Modified")]),v._v("。")]),v._v(" "),e("li",[v._v("在"),e("strong",[v._v("性能上")]),v._v("，"),e("code",[v._v("Last-Modified")]),v._v("优于"),e("code",[v._v("ETag")]),v._v("，"),e("code",[v._v("Last-Modified")]),v._v("仅记录一个时间，"),e("code",[v._v("ETag")]),v._v("根据文件生成哈希值。")])]),v._v(" "),e("p",[v._v("如果二者字段都存在，服务器会优先考虑"),e("code",[v._v("ETag")]),v._v("。")]),v._v(" "),e("h2",{attrs:{id:"缓存位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存位置"}},[v._v("#")]),v._v(" 缓存位置")]),v._v(" "),e("p",[v._v("当我们从缓存中获取资源时，是从什么地方获取到的呢？")]),v._v(" "),e("p",[v._v("浏览器中的缓存为止一共有4中，按优先级从高到低排为：")]),v._v(" "),e("ul",[e("li",[v._v("Service Worker")]),v._v(" "),e("li",[v._v("Memory Cache")]),v._v(" "),e("li",[v._v("Disk Cache")]),v._v(" "),e("li",[v._v("Push Cache")])]),v._v(" "),e("h3",{attrs:{id:"service-worker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#service-worker"}},[v._v("#")]),v._v(" Service Worker")]),v._v(" "),e("p",[v._v("Service Worker借鉴了Web Worker的思路，即让JS运行在主线程之外，由于它脱离了浏览器窗体，因此"),e("strong",[v._v("无法直接访问DOM")]),v._v("。虽然如此，但它仍然能帮我们完成很多功能，如"),e("strong",[v._v("离线缓存")]),v._v("、"),e("strong",[v._v("消息推送")]),v._v("和"),e("strong",[v._v("网络代理")]),v._v("等功能。其中"),e("strong",[v._v("离线缓存")]),v._v("就是Service Worker Cache。")]),v._v(" "),e("p",[v._v("Service Worker 同时也是 PWA 的重要实现机制，关于它的细节和特性，我们将会在后面的 PWA 的分享中详细介绍。")]),v._v(" "),e("h3",{attrs:{id:"memory-cache-and-disk-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#memory-cache-and-disk-cache"}},[v._v("#")]),v._v(" Memory Cache and Disk Cache")]),v._v(" "),e("p",[e("strong",[v._v("Memory Cache")]),v._v("指的是内存缓存，效率高但是存活时间短。")]),v._v(" "),e("p",[e("strong",[v._v("Disk Cache")]),v._v("存在磁盘中的缓存，效率低于Memory Cache，但在存储量和存储时长上优于Memory Cache。")]),v._v(" "),e("p",[v._v("资源存放策略：")]),v._v(" "),e("ul",[e("li",[v._v("较大的js，css文件会被放进磁盘，反之则在内存。")]),v._v(" "),e("li",[v._v("内存使用率较高时，文件优先放入磁盘。")])]),v._v(" "),e("h3",{attrs:{id:"push-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#push-cache"}},[v._v("#")]),v._v(" Push Cache")]),v._v(" "),e("p",[v._v("即推送缓存，这是浏览器缓存的最后一道防线。它是"),e("strong",[v._v("HTTP/2")]),v._v("的内容，目前应用并不广泛。"),e("a",{attrs:{href:"https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/",target:"_blank",rel:"noopener noreferrer"}},[v._v("扩展阅读"),e("OutboundLink")],1)]),v._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),e("p",[v._v("首先检验"),e("code",[v._v("Cache-Control")]),v._v("字段确认强缓存是否可用，如果可用则直接使用，返回"),e("code",[v._v("200")])]),v._v(" "),e("p",[v._v("强缓存失效则根据"),e("code",[v._v("ETag")]),v._v("或者"),e("code",[v._v("Last-Modified")]),v._v("在请求头中携带响应"),e("code",[v._v("If-None-Match")]),v._v("或者"),e("code",[v._v("If-Modified-Since")]),v._v("发送给服务器进行比对确定是否使用缓存，如果可用则返回"),e("code",[v._v("304")]),v._v("，否则返回新的资源和"),e("code",[v._v("200")]),v._v("状态码。")])])}),[],!1,null,null,null);_.default=t.exports}}]);