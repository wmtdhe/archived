(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{396:function(v,_,e){"use strict";e.r(_);var a=e(25),t=Object(a.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h2",{attrs:{id:"hot-module-reload-热重载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hot-module-reload-热重载"}},[v._v("#")]),v._v(" Hot Module Reload 热重载")]),v._v(" "),e("h3",{attrs:{id:"热重载特点："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#热重载特点："}},[v._v("#")]),v._v(" 热重载特点：")]),v._v(" "),e("ul",[e("li",[v._v("完全重载app的状态会丢失，而热重载会保持状态不变")]),v._v(" "),e("li",[v._v("只更新变化了的内容，节省开发时间")]),v._v(" "),e("li",[v._v("当"),e("code",[v._v("CSS")]),v._v("或"),e("code",[v._v("JS")]),v._v("发生变化时，立即反映在浏览器里")])]),v._v(" "),e("h3",{attrs:{id:"热重载如何工作的："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#热重载如何工作的："}},[v._v("#")]),v._v(" 热重载如何工作的：")]),v._v(" "),e("h4",{attrs:{id:"在程序（application）中"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在程序（application）中"}},[v._v("#")]),v._v(" 在程序（Application）中")]),v._v(" "),e("p",[v._v("以下步骤使得模块可以在程序中被替换和添加：")]),v._v(" "),e("ol",[e("li",[v._v("app让HMR运行时（runtime）来检查更新")]),v._v(" "),e("li",[v._v("运行时异步下载更新并通知程序")]),v._v(" "),e("li",[v._v("程序接下来请求运行时使用（"),e("code",[v._v("apply")]),v._v("）这些更新")]),v._v(" "),e("li",[v._v("运行时同步应用（"),e("code",[v._v("apply")]),v._v("）这些更新")])]),v._v(" "),e("h4",{attrs:{id:"在编译（compiler）中"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在编译（compiler）中"}},[v._v("#")]),v._v(" 在编译（Compiler）中")]),v._v(" "),e("p",[v._v("除了普通的资源外（assets），编译器还需要释放一个"),e("code",[v._v("update")]),v._v("信号来使得从旧版本更新到新版本。这个更新信号包括两部分：")]),v._v(" "),e("ol",[e("li",[v._v("更新后的"),e("code",[v._v("manifest")]),v._v("(the updated manifest)（"),e("code",[v._v("JSON")]),v._v("）")]),v._v(" "),e("li",[v._v("一个或多个更新后的代码块"),e("code",[v._v("chunks")]),v._v("（"),e("code",[v._v("JavaScript")]),v._v("）")])]),v._v(" "),e("p",[v._v("这个"),e("code",[v._v("manifest")]),v._v("包含了新的编译哈希和一个列表的更新了的代码块（"),e("code",[v._v("chunks")]),v._v("）。每个代码块包含了模块（"),e("code",[v._v("module")]),v._v("）新更新的代码，（或是一个表面模块被移除的标识）。")]),v._v(" "),e("p",[v._v("编译器保证了模块ID和代码块ID在各个构建之间是保持一致的。通常这些ID是存放在缓存中的（利用"),e("code",[v._v("webpack-dev-server")]),v._v("），但也可能把它们存在一个JSON文件中。")]),v._v(" "),e("h4",{attrs:{id:"在模块（module）中"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在模块（module）中"}},[v._v("#")]),v._v(" 在模块（Module）中")]),v._v(" "),e("p",[v._v("一个单独的更新处理器"),e("code",[v._v("(update handler)")]),v._v("可以更新一整个模块树"),e("code",[v._v("(module tree)")]),v._v("。如果树中的一个单独模块被更新了，那么整个依赖也会被重新加载。")]),v._v(" "),e("h4",{attrs:{id:"在运行时（runtime）中"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在运行时（runtime）中"}},[v._v("#")]),v._v(" 在运行时（Runtime）中")]),v._v(" "),e("p",[v._v("对于模块系统运行时（"),e("code",[v._v("module system runtime")]),v._v("）而言，更多的代码会被释放来追踪模块的"),e("code",[v._v("parent")]),v._v("和"),e("code",[v._v("children")]),v._v("。在管理层面来说，运行时支持两个方法："),e("code",[v._v("check")]),v._v("和"),e("code",[v._v("apply")]),v._v("。")]),v._v(" "),e("p",[e("code",[v._v("check")]),v._v("方法发送一个HTTP请求来请求"),e("code",[v._v("更新manifest")]),v._v("。如果请求失败，则表明没有更新存在。如果请求成功了，一列表的更新后的代码块会和当前已经加载的代码块进行对比。对于每个加载了的代码块而言，对应的更新代码块会随之下载。所有模块的更新都会被存在运行时。当所有更新了的代码块都被下载完成并可以使用时，运行时会切换到"),e("code",[v._v("ready")]),v._v("状态。")]),v._v(" "),e("p",[e("code",[v._v("apply")]),v._v("方法标记所有更新了的模块为"),e("code",[v._v("(invalid)")]),v._v("不可用的。对于每个不可用的模块而言，它们需要有一个更新处理器在它们或者它们父级的模块中，否则的话，这些不可用的标记会冒泡而上将父级模块也标记为不可用的。每个冒泡持续直到程序的入口处或者有更新处理器的模块。如果一直冒泡到入口处，则表面这个过程失败。")]),v._v(" "),e("p",[v._v("紧接着，所有标为不可用"),e("code",[v._v("(invalid)")]),v._v("的模块会被舍弃和卸载。当前的哈希会被更新，所有的"),e("code",[v._v("accept")]),v._v("处理器会被调用。运行时会切换到"),e("code",[v._v("idle")]),v._v("状态，一切进程又恢复如初。")])])}),[],!1,null,null,null);_.default=t.exports}}]);